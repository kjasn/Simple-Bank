// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount
) VALUES (
  $1, $2, $3
)RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFromIDTransfers = `-- name: DeleteFromIDTransfers :exec
DELETE FROM transfers
WHERE from_account_id = $1
`

// delete many transfers by from_account_id
func (q *Queries) DeleteFromIDTransfers(ctx context.Context, fromAccountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFromIDTransfers, fromAccountID)
	return err
}

const deleteTOIDTransfers = `-- name: DeleteTOIDTransfers :exec
DELETE FROM transfers
WHERE to_account_id = $1
`

// delete many transfers by to_account_id
func (q *Queries) DeleteTOIDTransfers(ctx context.Context, toAccountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTOIDTransfers, toAccountID)
	return err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers
WHERE from_account_id = $1 AND to_account_id = $2
`

type DeleteTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

// delete one transfer
func (q *Queries) DeleteTransfer(ctx context.Context, arg DeleteTransferParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, arg.FromAccountID, arg.ToAccountID)
	return err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers 
WHERE from_account_id = $1 AND to_account_id = $2
LIMIT 1
`

type GetTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

// get by from_account_id AND to_account_id
func (q *Queries) GetTransfer(ctx context.Context, arg GetTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, arg.FromAccountID, arg.ToAccountID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listFromIDTransfers = `-- name: ListFromIDTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE from_account_id = $1
LIMIT $2
OFFSET $3
`

type ListFromIDTransfersParams struct {
	FromAccountID int64 `json:"from_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

// get by from_account_id
func (q *Queries) ListFromIDTransfers(ctx context.Context, arg ListFromIDTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listFromIDTransfers, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToIDTransfers = `-- name: ListToIDTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE to_account_id = $1
LIMIT $2
OFFSET $3
`

type ListToIDTransfersParams struct {
	ToAccountID int64 `json:"to_account_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

// get by to_account_id
func (q *Queries) ListToIDTransfers(ctx context.Context, arg ListToIDTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listToIDTransfers, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfers
SET amount = $3 
WHERE from_account_id = $1 AND to_account_id = $2
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type UpdateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

// ONLY update the amount of an entry by from_account_id AND to_account_id
func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
