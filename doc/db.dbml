// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs
Project simple_bank {
  database_type: 'PostgreSQL'
  Note: '''
    # Simple Bank Database
  '''
}

Table users as U {
  username varchar [pk]
  hashed_password varchar [not null]
  full_name varchar [not null]
  email varchar [unique, not null]
  is_email_verified bool [not null, default: false]
  // if never changed, default zero value ( Z means time zone )
  password_changed_at timestamptz [not null, default: '0001-01-01 00:00:00Z'] 
  created_at timestamptz [not null, default: `now()`]
}

Table verify_emails {
  id bigserial [pk]
  secret_code char(6) [not null]
  username varchar [ref: > U.username, not null]
  email varchar [not null]
  is_used bool [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  // set expire time for security
  expires_at timestamptz [not null, default: `now() + interval '15 minutes'`]
}

Table accounts as A {
  id bigserial [pk]
  // one user can own multiple accounts with different currencies
  owner varchar [ref: > U.username, not null]
  // For simplicity, ONLY integer 
  balance bigint [not null]
  // currency Currency [not null]
  currency varchar [not null]
  created_at timestamptz [not null, default: `now()`]

  // set indexs for search and arrange in order these data
  indexes { 
    owner
    // make sure each users only have one account with same currency
    (owner, currency) [unique]
  }
}

// record all change to an account
Table entries { 
  id bigserial [pk]
  // 1-to-more  relationship
  account_id bigserial [ref: > A.id, not null]
  amount bigint [not null, note: 'negative OR positive']
  created_at timestamptz [not null, default: `now()`]

  indexes {
    account_id
  }
}

// record every transation between 2 accounts
// For simplicity, ONLY for internal account
Table transfers { 
  id bigserial [pk]
  from_account_id bigserial [ref: > A.id, not null]
  to_account_id bigserial [ref: > A.id, not null]
  amount bigint [not null, note: 'ONLY positive']
  created_at timestamptz [not null, default: `now()`]

  indexes {
    from_account_id
    to_account_id
    (from_account_id, to_account_id)
  }
}

// store refresh token
Table sessions {
  id uuid [pk]
  username varchar [ref: > U.username, not null]
  refresh_token varchar [not null]
  user_agent varchar [not null]
  client_ip varchar [not null]
  is_block bool [not null, default: false]
  expires_at timestamptz [not null]
  created_at timestamptz [not null, default: `now()`]
}